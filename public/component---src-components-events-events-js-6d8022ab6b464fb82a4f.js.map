{"version":3,"sources":["webpack:///./src/components/Events/Events.js"],"names":["connect","state","event","getEvents","props","useState","events","useRef","id","localStorage","getItem","idShow","setId","useEffect","allEvents","filter","e1","host","hostID","map","eventIid","e2","eventID","console","log","clear","formatAMPM","date","hours","Date","getHours","minutes","getMinutes","ampm","image","className","length","iD","e","key","src","avatar","alt","firstName","lastName","hostProfile","quote","introVideo","fluid","height","poster","thumbnail","video","position","description","homeCity","startTime","eventStartTime","endTime","eventEndTime","year","getUTCFullYear","month","getUTCMonth","datee","getUTCDate","dif","href","headerImage","style","to","title","slogan","timezone","replace","action","htmlFor","type","value"],"mappings":"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","file":"component---src-components-events-events-js-6d8022ab6b464fb82a4f.js","sourcesContent":["import React, { useEffect, useState, Fragment, useRef } from 'react'\r\nimport { Link } from \"gatsby\"\r\nimport Header from '../Header/Header'\r\nimport { Player, BigPlayButton } from 'video-react'\r\nimport \"./video.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { getEvents } from '../../redux/Events/events.action'\r\nimport Event from './Event'\r\nconst Events = (props) => {\r\n    const [events, getEvents] = useState([])\r\n    const vidRef = useRef(null)\r\n    const [show, setShow] = useState(false)\r\n    var id = localStorage.getItem('eventId')\r\n    const [idShow, setId] = useState(false)\r\n    useEffect(() => {\r\n        if (props.id) {\r\n            const allEvents = props.event.events.filter(e1 => e1.host.id === props.id)\r\n            getEvents(allEvents)\r\n        } else if (props.hostID) {\r\n            const allEvents = props.event.events.filter(e1 => e1.host.id === props.hostID).map(e1 => {\r\n                const eventIid = e1.event.filter(e2 => e2.id === props.eventID)\r\n                console.log(eventIid, 'kkkk')\r\n                e1[\"event\"] = eventIid\r\n                return e1\r\n            })\r\n\r\n            getEvents(allEvents)\r\n        } else {\r\n            getEvents(props.event.events)\r\n        }\r\n        localStorage.clear()\r\n        setId(false)\r\n    }, [])\r\n    console.log(events)\r\n    const formatAMPM = (date) => {\r\n        var date = new Date(date);\r\n        var hours = date.getHours();\r\n        var minutes = date.getMinutes();\r\n        var ampm = hours >= 12 ? 'pm' : 'am';\r\n        hours = hours % 12;\r\n        hours = hours ? hours : 12; // the hour '0' should be '12'\r\n        minutes = minutes < 10 ? '0' + minutes : minutes;\r\n        var strTime = hours + ':' + minutes + ' ' + ampm;\r\n        return strTime;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div id=\"wrapper\">\r\n\r\n                <Header image=\"/images/header/logo.svg\" />\r\n                <main className=\"main\">\r\n                    <section className=\"block-event\">\r\n                        <div className=\"container1\">\r\n                            {\r\n                                (events.length === 0 ?\r\n                                    (\r\n                                        <div>Loading</div>\r\n                                    ) : idShow ? (<Event iD={id} />) :\r\n                                        events.map((e1, e) => {\r\n                                            return (\r\n                                                <Fragment key={e}>\r\n                                                    <div className=\"col-left\">\r\n                                                        <div className=\"profile-info\">\r\n                                                            <div className=\"image-holder\">\r\n                                                                <img src={e1.host.avatar} alt=\"image description\" />\r\n                                                            </div>\r\n                                                            <blockquote>\r\n                                                                <cite>{`${e1.host.firstName} ${e1.host.lastName}`}</cite>\r\n                                                                <q>&ldquo;{`${e1.host.hostProfile.quote}`}&rdquo;</q>\r\n                                                            </blockquote>\r\n                                                        </div>\r\n                                                        {\r\n                                                            (e1.host.hostProfile.introVideo ?\r\n                                                                (\r\n                                                                    <div className=\"video-area\">\r\n                                                                        <Player\r\n                                                                            fluid={false}\r\n                                                                            height={255}\r\n                                                                            poster={`${e1.host.hostProfile.introVideo.thumbnail}`}\r\n                                                                            src={`${e1.host.hostProfile.introVideo.video}`}\r\n                                                                        >\r\n                                                                            <BigPlayButton position=\"center\" />\r\n                                                                        </Player>\r\n                                                                    </div>\r\n                                                                ) :\r\n                                                                (\r\n                                                                    <div></div>\r\n                                                                )\r\n                                                            )\r\n                                                        }\r\n                                                        <p>{e1.host.hostProfile.description}</p>\r\n                                                        <ul className=\"list-detail\">\r\n                                                            <li>\r\n                                                                <strong className=\"title\">Home City:</strong>\r\n                                                                <span className=\"text\">{e1.host.hostProfile.homeCity.description}</span>\r\n                                                            </li>\r\n                                                        </ul>\r\n\r\n                                                    </div>\r\n\r\n                                                    <div className=\"col-right\">\r\n                                                        <h1 className=\"h2\">Events by {`${e1.host.firstName} ${e1.host.lastName}`}:</h1>\r\n                                                        {\r\n                                                            e1.event.map(e2 => {\r\n\r\n                                                                const startTime = formatAMPM(e2.eventStartTime)\r\n                                                                const endTime = formatAMPM(e2.eventEndTime)\r\n                                                                const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n                                                                    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n                                                                ];\r\n                                                                const date = new Date(e2.eventStartTime)\r\n                                                                const year = date.getUTCFullYear()\r\n                                                                const month = monthNames[date.getUTCMonth() + 1]\r\n                                                                const datee = date.getUTCDate()\r\n                                                                var dif = (new Date(e2.eventEndTime) - new Date(e2.eventStartTime)) / 1000 / 60;\r\n                                                                return (\r\n                                                                    <article className=\"article-card\" key={e2.id}>\r\n                                                                        <div className=\"image-holder\">\r\n                                                                            <a href=\"#\"><img src={e2.headerImage} alt=\"image description\" style={{ height: '13em' }} /></a>\r\n                                                                        </div>\r\n                                                                        <div className=\"text-holder\">\r\n                                                                            <h2 className=\"h3\"><Link to={`/hostEvent/${e2.id}`} >{e2.title}</Link></h2>\r\n                                                                            <p>{e2.slogan}</p>\r\n                                                                            <ul className=\"list-detail\">\r\n                                                                                <li><i className=\"icon icon-calendar\"></i>{`${month}, ${datee}th, ${year} at ${startTime}-${endTime}`}</li>\r\n                                                                                <li><i className=\"icon icon-location\"></i>\r\n                                                                                    {e1.host.timezone.replace('/', ', ')}\r\n                                                                                </li>\r\n                                                                            </ul>\r\n                                                                            <div className=\"more-info\">\r\n                                                                                <span className=\"tickets\">3 Tickets Left</span>\r\n                                                                                <span className=\"duration\">{dif} mins</span>\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                                    </article>\r\n                                                                )\r\n                                                            })\r\n                                                        }\r\n                                                    </div>\r\n                                                </Fragment>\r\n                                            )\r\n                                        })\r\n                                )\r\n                            }\r\n                        </div>\r\n\r\n                        <div className=\"popup-holder\">\r\n                            <div className=\"popup-frame\">\r\n                                <div className=\"popup-wrap\">\r\n                                    <div className=\"box-wrap\">\r\n                                        <header className=\"head\">\r\n                                            <h2>Message Jamie:</h2>\r\n                                            <a href=\"#\" className=\"btn-close\"><i className=\"icon icon-close\"></i></a>\r\n                                        </header>\r\n                                        <form action=\"#\" className=\"form-message\">\r\n                                            <div className=\"field\">\r\n                                                <div className=\"field\">\r\n                                                    <label htmlFor=\"email\">Your Email:</label>\r\n                                                    <input type=\"email\" id=\"email\" />\r\n                                                </div>\r\n                                                <div className=\"field\">\r\n                                                    <label htmlFor=\"message\">Message:</label>\r\n                                                    <textarea id=\"message\"></textarea>\r\n                                                </div>\r\n                                                <input type=\"submit\" className=\"btn\" value=\"Try A MatchDate Event\" />\r\n                                            </div>\r\n                                        </form>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </section>\r\n                </main>\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\nconst mapStatetoProps = state => {\r\n    return {\r\n        event: state.event\r\n    };\r\n};\r\nexport default connect(mapStatetoProps, { getEvents })(Events)\r\n\r\n\r\n// onClick={() => { localStorage.setItem(\"eventId\", e2.id); setId(true) }}\r\n"],"sourceRoot":""}